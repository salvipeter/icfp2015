Submission for the lightning round
   - Team CDR (Peter Salvi <vukung@yahoo.com>)

Programming language: Common Lisp (SBCL)

Algorithm
---------
This is a very simple, random algorithm.
There is a state, that defines the general direction (east or west)
Then in every move, we do the first valid move of the following list:

1. Rotation (try randomly clockwise or counter-clockwise first).
   A rotation is only applied if it makes the unit thinner.
2. Move in the general direction.
3. Move downwards (try randomly southwest or southeast first).
4. Move in the opposite of the general direction.

If none of these succeeded, lock the unit.
If the top member of this unit is in the first 3 rows, then change the general direction.

Running inside lisp & visualization
-----------------------------------
The main function of the program, RUN-FILE, has the following parameters:

  (run-file filename &optional sendp tag)

If SENDP is T, it sends the results to davar server; otherwise it returns them as a value.

When the variable *PS-STREAM* is set, the whole game is exported to the stream as an EPS file.
For example

(with-open-file (*ps-stream* "test.eps" :direction :output :if-exists :supersede)
  (run-file "problems/problem_23.json"))

creates the file "test.eps" where you can watch the animation by holding down the PgDn button
with a PostScript viewer.

Compilation
-----------
You will need the Steel Bank Common Lisp, as well as some common libraries:
- alexandria
- cl-json
- iterate
All of these can be downloaded with quicklisp.

The Makefile just runs compile.lisp in SBCL.
